http://fusharblog.com/3-ways-to-define-comparison-functions-in-cpp/



* 自己写function，可以用function or class
    * 主要针对priority_queue做例子
https://stackoverflow.com/questions/16111337/declaring-a-priority-queue-in-c-with-a-custom-comparator

http://neutrofoton.github.io/blog/2016/12/29/c-plus-plus-priority-queue-with-comparator/

bool Compare(Foo, Foo)
{ //compare ; }
//   std::priority_queue<Foo, std::vector<Foo>, std::function<bool(Foo, Foo)>> pq(Compare);

class Compare
{
public:
    bool operator() (Foo, Foo)
    { // compare; }
};
//std::priority_queue<Foo, std::vector<Foo>, Compare> pq;
struct CustomCompare
{
    bool operator()(const int& lhs, const int& rhs)
    {
        return lhs < rhs;
    }
};
priority_queue<int,vector<int>, CustomCompare > pq;

//Beside the std::less or std::greater, we can create our custom 
comparator with lamda or custom class or struct.
 auto compare = [](int lhs, int rhs)
                {
                    return lhs < rhs;
                };

  std::priority_queue<int, std::vector<int>, decltype(compare)> q(compare);


sort(ins.begin(), ins.end(), [](Interval a, Interval b){return a.start < b.start;}); //居然还可以这么用


    * 更general的例子！！！！
http://fusharblog.com/3-ways-to-define-comparison-functions-in-cpp/
    * 自己定义的comparator要实例，因为less<T> 是functor 什么鬼，我不懂啊！！！！
https://stackoverflow.com/questions/34664833/no-matching-function-for-call-to-stdlessintlessconst-int-const-int
priority queue中实践一下就出了问题，之前的tree，其实根本没有用，虽然写了个comparator。我就是垃圾


